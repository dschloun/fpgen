openapi: "3.0.0"
info:
  version: 4.1.0
  title: 'FpGen api'
  description: 'API for fake profile dataset generator project'

tags:
  - name: InstantMessage
  - name: ConversationMessage
  - name: Conversation
  - name: Generation
  - name: OngoingGeneration
  - name: Dataset
  - name: Author
  - name: Statistic
  - name: Project
  - name: Result
  - name: Administration
  - name: Legal
  - name: Notification

paths:

#Legal
  /v1/gdpr:
    get:
      tags:
        - Legal
      summary: "Get GDPR information"
      description: "Get GDPR information"
      operationId: getGdpr
      responses:
        200:
          description: 'GDPR information successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Text'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/termsOfUse:
    get:
      tags:
        - Legal
      summary: "Get Terms of use"
      description: "Get GDPR information"
      operationId: getTermsOfUse
      responses:
        200:
          description: 'Terms of use successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Text'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#InstantMessage
  /v1/instantMessages:
    post:
      tags:
        - InstantMessage
      summary: "Generate instant messages"
      description: "Generate a instant messages"
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantMessageBatchCreation'

      responses:
        201:
          description: 'Instant messages generation request successfully sent'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/instantMessages/{instantMessageId}:
    get:
      tags:
        - InstantMessage
      summary: "Get a instant instant message"
      description: "Get a instant instant message"
      operationId: getInstantMessageById
      parameters:
        - $ref: '#/components/parameters/instantMessageId'
      responses:
        200:
          description: 'Instant message successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantMessage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - InstantMessage
      summary: "Delete a instant instant message"
      description: "Delete a instant instant message"
      operationId: deleteInstantMessageById
      parameters:
        - $ref: '#/components/parameters/instantMessageId'
      responses:
        204:
          description: 'Instant message successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/instantMessages/search:
    post:
      tags:
        - InstantMessage
      summary: "Search instant messages with pagination"
      description: "Search instant messages with pagination"
      operationId: searchInstantMessagesPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedInstantMessageQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantMessagesPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/instantMessages/generations/{generationId}:
    get:
      tags:
        - InstantMessage
      summary: "Find instant message list by generation id"
      description: "Find instant message list by generation id"
      operationId: findInstantMessagesByGenerationId
      parameters:
        - $ref: '#/components/parameters/generationId'
      responses:
        200:
          description: 'Instant messages successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstantMessage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Conversation
  /v1/conversations:
    post:
      tags:
        - Conversation
      summary: "Generate conversations"
      description: "Generate conversations"
      operationId: generateConversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationBatchCreation'

      responses:
        201:
          description: 'Conversations generation request successfully sent'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/conversations/{conversationId}:
    get:
      tags:
        - Conversation
      summary: "Get a conversation by id"
      description: "Get a conversation by id"
      operationId: getConversationById
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        200:
          description: 'Conversation successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Conversation
      summary: "Delete a conversation by id"
      description: "Delete a conversation by id"
      operationId: deleteConversationById
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        204:
          description: 'Conversation successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #not very useful
  /v1/conversations/{conversationId}/{conversationInstantMessageId}:
    get:
      tags:
        - Conversation
      summary: "Get a conversation by id"
      description: "Get a conversation by id"
      operationId: getConversationInstantMessageListById
      parameters:
        - $ref: '#/components/parameters/conversationId'
        - $ref: '#/components/parameters/conversationInstantMessageId'
      responses:
        200:
          description: 'Conversation instant message successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationMessage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/conversations/search:
    post:
      tags:
        - Conversation
      summary: "Search conversations with pagination"
      description: "Search conversations with pagination"
      operationId: searchConversationsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedConversationQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/conversations/generations/{generationId}:
    get:
      tags:
        - Conversation
      summary: "Find a conversation by generationId"
      description: "Find a conversation by generationId"
      operationId: findConversationByGenerationId
      parameters:
        - $ref: '#/components/parameters/generationId'
      responses:
        200:
          description: 'Conversations successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #conversationMessages
  /v1/conversationMessages/search:
    post:
      tags:
        - ConversationMessage
      summary: "Search conversation messages with pagination"
      description: "Search conversation messages with pagination"
      operationId: searchConversationMessagesPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedConversationMessageQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationMessagesPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #Generation
  /v1/generations/{generationId}:
    get:
      tags:
        - Generation
      summary: "Get a generation by id"
      description: "Get a generation by id"
      operationId: getGenerationById
      parameters:
        - $ref: '#/components/parameters/generationId'
      responses:
        200:
          description: 'Generation successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Generation
      summary: "Delete a generation by id"
      description: "Delete a generation by id"
      operationId: deleteGenerationById
      parameters:
        - $ref: '#/components/parameters/generationId'
      responses:
        204:
          description: 'Generation successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/generations/search:
    post:
      tags:
        - Generation
      summary: "Search generations with pagination"
      description: "Search generations with pagination"
      operationId: searchGenerationsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedGenerationQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerationsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #OnGoingGeneration
  /v1/ongoingGenerations/{ongoingGenerationId}:
    get:
      tags:
        - OngoingGeneration
      summary: "Get an ongoing generation by id"
      description: "Get an ongoing generation by id"
      operationId: getOngoingGenerationById
      parameters:
        - $ref: '#/components/parameters/ongoingGenerationId'
      responses:
        200:
          description: ' Ongoing Generation successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OngoingGeneration'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Authors
  /v1/authors:
    post:
      tags:
        - Author
      summary: "Create author"
      description: "Create author"
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreation'
      responses:
        200:
          description: 'Author successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Author
      summary: "Get authors"
      description: "Get authors"
      operationId: getAuthorList
      responses:
        200:
          description: 'Authors successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/authors/{authorId}:
    get:
      tags:
        - Author
      summary: "Get author by id"
      description: "Get author by id"
      operationId: getAuthorById
      parameters:
        - $ref: '#/components/parameters/authorId'
      responses:
        200:
          description: 'Author successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Administration
      summary: "Update author status"
      description: "Update author status"
      operationId: updateAuthorStatus
      parameters:
        - $ref: '#/components/parameters/authorId'
        - $ref: '#/components/parameters/authorStatus'
      responses:
        200:
          description: 'Author status successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/authors/search:
    post:
      tags:
        - Author
      summary: "Search authors with pagination"
      description: "Search authors with pagination"
      operationId: searchAuthorsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedAuthorQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#Dataset
  /v1/datasets:
    post:
      tags:
        - Dataset
      summary: "Create dataset"
      description: "Create dataset"
      operationId: createDataset
      parameters:
        - $ref: '#/components/parameters/datasetType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCreation'
      responses:
        200:
          description: 'Dataset successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}:
    get:
      tags:
        - Dataset
      summary: "Get a dataset by id"
      description: "Get a dataset by id"
      operationId: getDatasetById
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        200:
          description: 'Dataset successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    post:
      tags:
        - Dataset
      summary: "Add generations to dataset"
      description: "Add generations to dataset"
      operationId: addGenerationListToDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/UUID'
      responses:
        201:
          description: 'Generations successfully added to dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Dataset
      summary: "Remove generations from dataset"
      description: "Remove generations from dataset"
      operationId: removeGenerationFromDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/UUID'
      responses:
        204:
          description: 'Generations successfully removed from dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Dataset
      summary: "Delete dataset"
      description: "Delete dataset"
      operationId: deleteDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        204:
          description: 'Dataset successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}/newVersion:
    post:
      tags:
        - Dataset
      summary: "Create a new version of the dataset"
      description: "Create a new version of the dataset"
      operationId: createNewDatasetVersion
      parameters:
        - $ref: '#/components/parameters/datasetId'
        - $ref: '#/components/parameters/authorQueryId'
      responses:
        201:
          description: 'Dataset new version successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}/versions:
    get:
      tags:
        - Dataset
      summary: "Get all version of the dataset"
      description: "Get all version of the dataset"
      operationId: getDatasetAllVersions
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        201:
          description: 'Dataset new version successfully created'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}/validate:
    put:
      tags:
        - Dataset
      summary: "Validate dataset"
      description: "Validate dataset"
      operationId: validateDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        204:
          description: 'Dataset has been successfully validated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}/download:
    get:
      tags:
        - Dataset
      summary: "Download dataset"
      description: "Download dataset in csv format"
      operationId: downloadDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        200:
          description: 'Dataset has been successfully downloaded'
          content:
            text/csv:
              schema:
                type: string
                format: binary
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/{datasetId}/bias:
    get:
      tags:
        - Dataset
      summary: "Check dataset bias"
      description: "Check dataset bias"
      operationId: checkDatasetBias
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        200:
          description: 'Dataset bias successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RealFakeTopicBias'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/datasets/search:
    post:
      tags:
        - Dataset
      summary: "Search datasets with pagination"
      description: "Search datasets with pagination"
      operationId: searchDatasetsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedDatasetQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

# result
  /v1/datasets/{datasetId}/results:
    post:
      tags:
        - Result
      summary: "Add result on dataset"
      description: "Add result on dataset"
      operationId: addResultOnDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultCreation'
      responses:
        200:
          description: 'Result successfully added to dataset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Result
      summary: "Get result list on dataset"
      description: "Get result list on dataset"
      operationId: getResultListDataset
      parameters:
        - $ref: '#/components/parameters/datasetId'
      responses:
        200:
          description: 'Result list successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/results/{resultId}:
    put:
      tags:
        - Result
      summary: "Update result"
      description: "Update result"
      operationId: updateResultOnDataset
      parameters:
        - $ref: '#/components/parameters/resultId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultUpdate'
      responses:
        201:
          description: 'Result successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Result
      summary: "Get result"
      description: "Get result"
      operationId: getResultById
      parameters:
        - $ref: '#/components/parameters/resultId'
      responses:
        201:
          description: 'Result successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Result
      summary: "Delete result"
      description: "Delete result"
      operationId: deleteResultById
      parameters:
        - $ref: '#/components/parameters/resultId'
      responses:
        204:
          description: 'Result successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

# project
  /v1/projects:
    post:
      tags:
        - Project
      summary: "Create project"
      description: "Create project"
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreation'
      responses:
        200:
          description: 'Project successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/projects/{projectId}:
    get:
      tags:
        - Project
      summary: "Get a project by id"
      description: "Get a project by id"
      operationId: getProjectById
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: 'Project successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Project
      summary: "Update project data"
      description: "Update project data"
      operationId: updateProjectData
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: 'common.yaml#/components/schemas/UUID'
      responses:
        201:
          description: 'Project successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Project
      summary: "Delete project"
      description: "Delete project"
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        204:
          description: 'Project successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/projects/{projectId}/trainingTestDifferences:
    get:
      tags:
        - Project
      summary: "Get difference between training and test dataset for a given project by id"
      description: "Get difference between training and test dataset for a given project by id"
      operationId: getDatasetsTrainingTestDifferencesByProjectId
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: 'Differences successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTestDifferences'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/projects/search:
    post:
      tags:
        - Project
      summary: "Search projects with pagination"
      description: "Search projects with pagination"
      operationId: searchProjectsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedProjectQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  # statistics
  /v1/statistics/{statisticId}:
    get:
      tags:
        - Statistic
      summary: "Get a statistic by id"
      description: "Get a statistic by id"
      operationId: getStatisticById
      parameters:
        - $ref: '#/components/parameters/statisticId'
      responses:
        200:
          description: 'Statistic successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  # prompt
  /v1/prompts/{promptId}:
    get:
      tags:
        - Administration
      summary: "Get prompt by id"
      description: "Get prompt by id"
      operationId: getPromptById
      parameters:
        - $ref: '#/components/parameters/promptId'
      responses:
        200:
          description: 'Prompt successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Administration
      summary: "Update prompt by id"
      description: "Update prompt by id"
      operationId: updatePromptById
      parameters:
        - $ref: '#/components/parameters/promptId'
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptUpdate'
      responses:
        200:
          description: 'Prompt successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/prompts/{promptId}/updateStatus:
    put:
      tags:
        - Administration
      summary: "Update prompt status"
      description: "Update prompt status"
      operationId: updatePromptStatus
      parameters:
        - $ref: '#/components/parameters/promptId'
        - $ref: '#/components/parameters/promptStatus'
      responses:
        204:
          description: 'Prompt successfully validated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/prompts/{promptId}/default:
    put:
      tags:
        - Administration
      summary: "Select default prompt by id"
      description: "Select default prompt by id"
      operationId: selectDefaultPrompt
      parameters:
        - $ref: '#/components/parameters/promptId'
      responses:
        204:
          description: 'Default prompt successfully selected'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/prompts:
    post:
      tags:
        - Administration
      summary: "Create prompt"
      description: "Create prompt"
      operationId: createPrompt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptCreation'
      responses:
        201:
          description: 'Prompts successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Administration
      summary: "Get prompt by status"
      description: "Get prompt by status"
      operationId: getPromptsByStatus
      parameters:
        - $ref: '#/components/parameters/promptStatus'
      responses:
        200:
          description: 'Prompts successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/prompts/user:
    get:
      tags:
        - Administration
      summary: "Get prompt by dataset type and message type"
      description: "Get prompt by dataset type and message type"
      operationId: getPromptsByDatasetTypeAndMessageType
      parameters:
        - $ref: '#/components/parameters/datasetType'
        - $ref: '#/components/parameters/messageType'
      responses:
        200:
          description: 'Prompts successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/notifications:
    post:
      tags:
        - Notification
      summary: "Create a notification"
      description: "Create a notification"
      operationId: createNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreation'
      responses:
        200:
          description: 'Notifications successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Notification
      summary: "Get notifications"
      description: "Get notifications"
      operationId: getNotifications'
      responses:
        200:
          description: 'Notifications successfully recovered'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/notifications/unread:
    get:
      tags:
        - Notification
      summary: "Does exist unread notifications by author id"
      description: "Does exist notifications by author id"
      operationId: existsUnreadNotifications'
      responses:
        200:
          description: 'Notifications successfully recovered'
          content:
            application/json:
              schema:
                type: boolean
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /v1/notifications/{notificationId}:
    get:
      tags:
        - Notification
      summary: "Get notifications by id"
      description: "Get notifications by id"
      operationId: getNotificationById'
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        200:
          description: 'Notification successfully recovered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    put:
      tags:
        - Notification
      summary: "Update notifications status"
      description: "Update notifications status"
      operationId: updateNotificationStatus'
      parameters:
        - $ref: '#/components/parameters/notificationId'
        - $ref: '#/components/parameters/notificationStatus'
      responses:
        204:
          description: 'Notification successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Notification
      summary: "Delete notifications status"
      description: "Delete notifications status"
      operationId: deleteNotificationStatus'
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        204:
          description: 'Notification successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

# components
components:
  parameters:
    instantMessageId:
      name: instantMessageId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    conversationId:
      name: conversationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    conversationInstantMessageId:
      name: conversationInstantMessageId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    generationId:
      name: generationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    ongoingGenerationId:
      name: ongoingGenerationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    generationType:
      name: generationType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/GenerationType'

    authorId:
      name: authorId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    authorStatus:
      name: authorStatus
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AuthorStatusEnum'
    
    authorQueryId:
      name: authorId
      in: query
      required: false
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    datasetId:
      name: datasetId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    datasetType:
      name: datasetType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/DatasetType'

    statisticId:
      name: statisticId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    projectId:
      name: projectId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    projectType:
      name: projectType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/ProjectType'

    resultId:
      name: resultId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    promptId:
      name: promptId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    promptStatus:
      name: promptStatus
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/PromptStatusEnum'

    messageType:
      name: messageType
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/MessageType'

    notificationId:
      name: notificationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    notificationStatus:
      name: notificationStatus
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/NotificationStatusEnum'

  schemas:
    # bodies
    # request bodies
    ProjectCreation:
      type: object
      required:
        - name
        - description
        - projectType
      properties:
        projectType:
          $ref: '#/components/schemas/ProjectType'
        name:
          type: string
        description:
          type: string
        organization:
          type: string

    InstantMessageBatchCreation:
        type: object
        required:
          - instantMessageCreationList
        properties:
          datasetId:
            $ref: 'common.yaml#/components/schemas/UUID'
          instantMessageCreationList:
            type: array
            items:
              $ref: '#/components/schemas/GenerationCreation'

    ConversationBatchCreation:
      type: object
      required:
        - conversationCreationList
      properties:
        datasetId:
          $ref: 'common.yaml#/components/schemas/UUID'
        conversationCreationList:
          type: array
          items:
            $ref: '#/components/schemas/GenerationCreation'
        minInteractionNumber:
            type: integer
        maxInteractionNumber:
            type: integer

    # response bodies
    Text:
      type: object
      properties:
        text:
          type: string

    Project:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        modificationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        type:
          $ref: '#/components/schemas/ProjectType'
        name:
          type: string
        description:
          type: string
        organization:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        trainingDataset:
          $ref: '#/components/schemas/Dataset'
        testDataset:
          $ref: '#/components/schemas/Dataset'
        validationDataset:
          $ref: '#/components/schemas/Dataset'

    Interlocutor:
      type: object
      properties:
        id:
          type: integer
        interlocutorType:
          $ref: '#/components/schemas/InterlocutorType'

    InstantMessage:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationBusinessId:
          type: string

    ConversationMessage:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        conversationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        content:
          type: string
        sender:
          $ref: '#/components/schemas/Interlocutor'
        receiver:
          $ref: '#/components/schemas/Interlocutor'
        orderNumber:
          type: integer

    Conversation:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        conversationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ConversationMessage'

    ConversationSummary:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationBusinessId:
          type: string
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer

    AuthorCreation:
      type: object
      required:
        - lastname
        - firstname
        - trigram
        - organization
        - authorFunction
        - email
        - phoneNumber
      properties:
        lastname:
          type: string
        firstname:
          type: string
        trigram:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        motivation:
          type: string
        acceptTermsOfUse:
          type: boolean

    Author:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        lastname:
          type: string
        firstname:
          type: string
        trigram:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        status:
          $ref: '#/components/schemas/AuthorStatusEnum'
        acceptTermsOfUse:
          type: boolean
        motivation:
          type: string

    GenerationCreation:
      type: object
      required:
        - topic
        - type
        - quantity
      properties:
        topic:
          $ref: '#/components/schemas/MessageTopic'
        type:
          $ref: '#/components/schemas/MessageType'
        promptId:
          $ref: 'common.yaml#/components/schemas/UUID'
        quantity:
          type: integer

    Generation:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        generationId:
          type: string
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        modificationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        generationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        promptVersion:
          type: integer
        author:
          type: string
        details:
          type: string
        quantity:
          type: integer
        datasetId:
          $ref: 'common.yaml#/components/schemas/UUID'

    DatasetCreation:
      type: object
      required:
        - datasetFunction
        - type
      properties:
        datasetFunction:
          $ref: '#/components/schemas/DatasetFunctionEnum'
        type:
          $ref: '#/components/schemas/DatasetType'
        description:
          type: string
        comment:
          type: string
        name:
          type: string

    Dataset:
      type: object
      required:
        - datasetFunction
        - type
        - validated
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        modificationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        author:
          $ref: '#/components/schemas/Author'
        datasetFunction:
          $ref: '#/components/schemas/DatasetFunctionEnum'
        type:
          $ref: '#/components/schemas/DatasetType'
        name:
          type: string
        comment:
          type: string
        description:
          type: string
        version:
          type: number
        ongoingGenerationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        statistic:
          $ref: '#/components/schemas/Statistic'
        validated:
          type: boolean
        isLastVersion:
          type: boolean
        hasResult:
          type: boolean
        recordNumber:
          type: integer

    OngoingGeneration:
      type: object
      required:
        - id
        - creationDate
        - type
        - generationList
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        authorTrigram:
          type: string
        type:
          $ref: '#/components/schemas/GenerationType'
        generationList:
          type: array
          items:
            $ref: '#/components/schemas/GenerationSummary'

    GenerationSummary:
      type: object
      required:
        - id
        - messageType
        - messageTopic
        - quantity

    Statistic:
      type: object
      required:
        - id
        - fakeRealRatios
        - typeRatios
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        fakeRealRatios:
          $ref: '#/components/schemas/FakeRealRatios'
        typeRatios:
          $ref: '#/components/schemas/TypeRatios'
        genuineTopicRatios:
          $ref: '#/components/schemas/MessageTypeTopicRatios'
        socialEngineeringTopicRatios:
          $ref: '#/components/schemas/MessageTypeTopicRatios'
        harassmentTopicRatios:
          $ref: '#/components/schemas/MessageTypeTopicRatios'

    FakeRealRatios:
      type: object
      required:
        - fakeRatio
        - realRatio
      properties:
        fakeRatio:
          type: number
          format: double
        realRatio:
          type: number
          format: double

    TypeRatios:
      type: object
      required:
        - socialEngineeringRatio
        - harassmentRatio
        - genuineRatio
      properties:
        socialEngineeringRatio:
          type: number
          format: double
        harassmentRatio:
          type: number
          format: double
        genuineRatio:
          type: number
          format: double

    MessageTypeTopicRatios:
      type: object
      required:
        - messageType
        - messageTopicRatioList
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopicRatioList:
          type: array
          items:
            $ref: '#/components/schemas/TopicRatioCouple'

    TopicRatioCouple:
      type: object
      required:
          - messageTopic
          - ratio
      properties:
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        ratio:
          type: number
          format: double

    TypeTopicDifference:
      type: object
      required:
        - messageType
        - messageTopic
        - difference
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        difference:
          type: integer

    TrainingTestDifferences:
      type: object
      properties:
        fakeDifference:
          type: integer
        realDifference:
          type: integer
        socialEngineeringDifference:
          type: integer
        harassmentDifference:
          type: integer
        typeTopicDifferences:
          type: array
          items:
            $ref: '#/components/schemas/TypeTopicDifference'

    RealFakeTopicBias:
      type: object
      required:
        - messageTopic
        - bias
      properties:
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        realNumber:
          type: integer
        fakeNumber:
          type: integer
        bias:
          type: integer

    ResultCreation:
      type: object
      required:
        - datasetId
      properties:
        datasetId:
          $ref: 'common.yaml#/components/schemas/UUID'
        experimentDate:
          $ref: 'common.yaml#/components/schemas/Date'
        machineDetails:
          type: string
        algorithmType:
          type: string
        algorithmSettings:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmSetting'
        otherSettingDetails:
          type: string
        accuracy:
          type: number
          format: double
        precision:
          type: number
          format: double
        recall:
          type: number
          format: double
        f1Score:
          type: number
          format: double
        prAuc:
          type: number
          format: double
        fpRate:
          type: number
          format: double
        fnRate:
          type: number
          format: double
        tpRate:
          type: number
          format: double
        tnRate:
          type: number
          format: double
        appreciation:
          type: string
        comment:
          type: string

    ResultUpdate:
      type: object
      properties:
        experimentDate:
          $ref: 'common.yaml#/components/schemas/Date'
        machineDetails:
          type: string
        algorithmType:
          type: string
        algorithmSettings:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmSetting'
        otherSettingDetails:
          type: string
        accuracy:
          type: number
          format: double
        precision:
          type: number
          format: double
        recall:
          type: number
          format: double
        f1Score:
          type: number
          format: double
        prAuc:
          type: number
          format: double
        fpRate:
          type: number
          format: double
        fnRate:
          type: number
          format: double
        tpRate:
          type: number
          format: double
        tnRate:
          type: number
          format: double
        appreciation:
          type: string
        comment:
          type: string

    Result:
      type: object
      required:
        - datasetId
        - authorId
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        datasetId:
          $ref: 'common.yaml#/components/schemas/UUID'
        datasetName:
          type: string
        authorId:
          $ref: 'common.yaml#/components/schemas/UUID'
        author:
          $ref: '#/components/schemas/Author'
        experimentDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        machineDetails:
          type: string
        algorithmType:
          type: string
        algorithmSettings:
          type: array
          items:
            $ref: '#/components/schemas/AlgorithmSetting'
        otherSettingDetails:
          type: string
        accuracy:
          type: number
          format: double
        precision:
          type: number
          format: double
        recall:
          type: number
          format: double
        f1Score:
          type: number
          format: double
        prAuc:
          type: number
          format: double
        fpRate:
          type: number
          format: double
        fnRate:
          type: number
          format: double
        tpRate:
          type: number
          format: double
        tnRate:
          type: number
          format: double
        appreciation:
          type: string
        comment:
          type: string

    AlgorithmSetting:
      type: object
      properties:
        parameterName:
          type: string
        value:
          type: string

    Prompt:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        datasetType:
          $ref: '#/components/schemas/DatasetType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        version:
          type: integer
        userContent:
          type: string
        systemContent:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        status:
          $ref: '#/components/schemas/PromptStatusEnum'
        default:
          type: boolean
        motivation:
          type: string

    PromptCreation:
      type: object
      properties:
        datasetType:
          $ref: '#/components/schemas/DatasetType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        userContent:
          type: string
        systemContent:
          type: string
        motivation:
          type: string

    PromptUpdate:
      type: object
      properties:
        userContent:
          type: string
        systemContent:
          type: string

    Notification:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        senderName:
          type: string
        sender:
          $ref: '#/components/schemas/SenderContact'
        creationDate:
          $ref: 'common.yaml#/components/schemas/DateTime'
        status:
          $ref: '#/components/schemas/NotificationStatusEnum'
        message:
          type: string

    SenderContact:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        email:
          type: string
        phoneNumber:
          type: string

    NotificationCreation:
      type: object
      properties:
        authorReceiverId:
          $ref: 'common.yaml#/components/schemas/UUID'
        message:
          type: string

    # enums
    DatasetType:
      type: string
      enum:
        - INSTANT_MESSAGE
        - CONVERSATION

    InterlocutorType:
      type: string
      enum:
        - GENUINE
        - HARASSER
        - SOCIAL_ENGINEER

    MessageType:
      type: string
      enum:
        - SOCIAL_ENGINEERING
        - HARASSMENT
        - GENUINE

    MessageTopic:
      type: string
      enum:
        - WORK
        - SPORT
        - POLITICS
        - SCIENCE
        - TECHNOLOGY
        - ART
        - MUSIC
        - MOVIES
        - GAMES
        - LITERATURE
        - PHILOSOPHY
        - RELIGION
        - HISTORY
        - GEOGRAPHY
        - ECONOMY
        - SOCIETY
        - HEALTH
        - EDUCATION
        - ENVIRONMENT
        - ROMANCE
        - OTHER

    GenerationType:
      type: string
      enum:
        - INSTANT_MESSAGE
        - CONVERSATION

    DatasetFunctionEnum:
      type: string
      enum:
        - TRAINING
        - TEST
        - VALIDATION

    ProjectType:
      type: string
      enum:
        - INSTANT_MESSAGE
        - CONVERSATION

    PromptStatusEnum:
      type: string
      enum:
        - VALIDATED
        - REFUSED
        - DEPRECATED
        - WAITING_ANALYSE
        - ONGOING_ANALYSE

    AuthorStatusEnum:
      type: string
      enum:
        - WAITING_VERIFICATION
        - VERIFIED
        - BANISHED
        - SUSPENDED

    NotificationStatusEnum:
      type: string
      enum:
        - UNREAD
        - READ

    ###############################################################################################################
    #For the pagination
    ###############################################################################################################
      #Generations
    PagedGenerationQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/GenerationQuery'
        sortField:
          $ref: '#/components/schemas/GenerationSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    GenerationQuery:
      type: object
      properties:
        generationType:
          $ref: '#/components/schemas/GenerationType'
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        promptVersion:
          type: integer
        quantity:
          type: integer
        authorTrigram:
          type: string
        inDatasetIdList:
          type: array
          items:
            $ref: 'common.yaml#/components/schemas/UUID'
        notInDatasetIdList:
          type: array
          items:
            $ref: 'common.yaml#/components/schemas/UUID'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    GenerationSortEnum:
      type: string
      enum:
        - GENERATION_TYPE
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - USER_PROMPT
        - SYSTEM_PROMPT
        - QUANTITY
        - AUTHOR
        - DATE

    GenerationsPage:
      type: object
      required:
        - pagination
        - generations
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        generations:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Generation'

      #Conversations
    PagedConversationQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ConversationQuery'
        sortField:
          $ref: '#/components/schemas/ConversationSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    ConversationQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        maxInteractionNumber:
          type: integer
        minInteractionNumber:
          type: integer
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    ConversationSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - MAX_INTERACTION_NUMBER
        - MIN_INTERACTION_NUMBER
        - DATE

    ConversationsPage:
      type: object
      required:
        - pagination
        - conversations
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        conversations:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/ConversationSummary'

      #Conversation Messages
    PagedConversationMessageQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ConversationMessageQuery'
        sortField:
          $ref: '#/components/schemas/ConversationMessageSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    ConversationMessageQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    ConversationMessageSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - CONTENT
        - DATE

    ConversationMessagesPage:
      type: object
      required:
        - pagination
        - conversationMessages
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        conversationMessages:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/ConversationMessage'

    #Instant Messages
    PagedInstantMessageQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/InstantMessageQuery'
        sortField:
          $ref: '#/components/schemas/InstantMessageSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    InstantMessageQuery:
      type: object
      properties:
        messageType:
          $ref: '#/components/schemas/MessageType'
        messageTopic:
          $ref: '#/components/schemas/MessageTopic'
        content:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    InstantMessageSortEnum:
      type: string
      enum:
        - MESSAGE_TYPE
        - MESSAGE_TOPIC
        - CONTENT
        - DATE

    InstantMessagesPage:
      type: object
      required:
        - pagination
        - instantMessages
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        instantMessages:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/InstantMessage'

    #Dataset
    PagedDatasetQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/DatasetQuery'
        sortField:
          $ref: '#/components/schemas/DatasetSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    DatasetQuery:
      type: object
      properties:
        datasetType:
          $ref: '#/components/schemas/DatasetType'
        version:
          type: string
        name:
          type: string
        description:
          type: string
        comment:
          type: string
        authorTrigram:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    DatasetSortEnum:
      type: string
      enum:
        - DATASET_TYPE
        - NAME
        - AUTHOR_TRIGRAM
        - DATE

    DatasetsPage:
      type: object
      required:
        - pagination
        - datasets
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        datasets:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Dataset'

    #Author
    PagedAuthorQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/AuthorQuery'
        sortField:
          $ref: '#/components/schemas/AuthorSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    AuthorQuery:
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        organization:
          type: string
        authorFunction:
          type: string
        trigram:
          type: string
        email:
          type: string
        status:
          $ref: '#/components/schemas/AuthorStatusEnum'

    AuthorSortEnum:
      type: string
      enum:
        - LASTNAME
        - FIRSTNAME
        - AUTHOR_TRIGRAM

    AuthorsPage:
      type: object
      required:
        - pagination
        - authors
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        authors:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Author'

    #Project
    PagedProjectQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: 'common.yaml#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ProjectQuery'
        sortField:
          $ref: '#/components/schemas/ProjectSortEnum'
        sortDirection:
          $ref: 'common.yaml#/components/schemas/SortDirection'

    ProjectQuery:
      type: object
      properties:
        projectType:
          $ref: '#/components/schemas/ProjectType'
        name:
          type: string
        description:
          type: string
        organization:
          type: string
        authorTrigram:
          type: string
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'

    ProjectSortEnum:
      type: string
      enum:
        - NAME
        - ORGANIZATION
        - AUTHOR_TRIGRAM

    ProjectsPage:
      type: object
      required:
        - pagination
        - projects
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        projects:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Project'